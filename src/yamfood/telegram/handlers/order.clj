(ns yamfood.telegram.handlers.order
  (:require [yamfood.telegram.dispatcher :as d]
            [yamfood.core.users.core :as users]))


(def location-emoji "\uD83D\uDCCD")
(def payment-emoji "\uD83D\uDCB5")
(def money-emoji "\uD83D\uDCB0")
(def comment-emoji "\uD83D\uDCAC")
(def basket-emoji "\uD83E\uDDFA")


(def request-location-markup
  {:reply_markup
   {:resize_keyboard true
    :keyboard        [[{:text             "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                        :request_location true}]]}})


(defn request-location
  [_ update]
  (let [query (:callback_query update)
        chat-id (:id (:from query))
        message-id (:message_id (:message query))]
    {:send-text      {:chat-id chat-id
                      :text    "–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?"
                      :options request-location-markup}
     :delete-message {:chat-id    chat-id
                      :message-id message-id}}))


(defn make-order-state
  [ctx update]
  {:core {:function    hash-map
          :on-complete #(d/dispatch
                          ctx
                          [:send-order-detail update %])}})


(defn handle-to-order
  [ctx update]
  (let [query (:callback_query update)
        chat-id (:id (:from query))
        user (:user ctx)
        message-id (:message_id (:message query))]
    (into
      (cond
        (:location user) (make-order-state ctx update)
        :else {:send-text {:chat-id chat-id
                           :text    "–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?"
                           :options request-location-markup}})
      {:delete-message {:chat-id    chat-id
                        :message-id message-id}})))


(def order-confirmation-markup
  {:inline_keyboard
   [[{:text location-emoji :callback_data "request-location"}
     {:text payment-emoji :callback_data "change-payment-type"}
     {:text comment-emoji :callback_data "change-comment"}]
    [{:text (str basket-emoji " –ö–æ—Ä–∑–∏–Ω–∞") :callback_data "basket"}]
    [{:text "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" :callback_data "nothing"}]]})


(defn make-order-text
  [order-state]
  (format (str "*–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:* \n\n"
               money-emoji " %s —Å—É–º \n"
               payment-emoji " %s \n"
               comment-emoji " –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è \n\n"
               location-emoji " %s")
          "85 000"
          "–ù–∞–ª–∏—á–Ω—ã–º–∏"
          "60, 1st Akkurgan Passage, Mirzo Ulugbek district, Tashkent"))


(defn get-chat-id-from-update
  "Use when you don't know input update type"
  [update]
  (let [message (:message update)
        query (:callback_query update)]
    (cond
      message (:id (:from message))
      query (:id (:from query)))))


(defn send-order-detail
  [_ update order-state]
  (let [chat-id (get-chat-id-from-update update)]
    {:send-text {:chat-id chat-id
                 :text    (make-order-text order-state)
                 :options {:reply_markup order-confirmation-markup
                           :parse_mode   "markdown"}}}))


(defn handle-location
  [ctx update]
  (let [message (:message update)
        chat-id (:id (:from message))
        location (:location message)]
    {:send-text {:chat-id chat-id
                 :text    "–õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                 :options {:reply_markup {:remove_keyboard true}}}
     :core      [(:core (make-order-state ctx update))
                 {:function #(users/update-location!
                               (:id (:user ctx))
                               (:longitude location)
                               (:latitude location))}]}))


(d/register-event-handler!
  :location
  handle-location)


(d/register-event-handler!
  :request-location
  request-location)


(d/register-event-handler!
  :send-order-detail
  send-order-detail)


(send-order-detail {} {:update_id 435322822, :callback_query {:id "340271653891766996", :from {:id 79225668, :is_bot false, :first_name "–†—É—Å—Ç–∞–º", :last_name "–ë–∞–±–∞–¥–∂–∞–Ω–æ–≤", :username "kensay", :language_code "ru"}, :message {:message_id 9911, :from {:id 488312680, :is_bot true, :first_name "Kensay", :username "kensaybot"}, :chat {:id 79225668, :first_name "–†—É—Å—Ç–∞–º", :last_name "–ë–∞–±–∞–¥–∂–∞–Ω–æ–≤", :username "kensay", :type "private"}, :date 1574969847, :text "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:", :reply_markup {:inline_keyboard [[{:text "ü•ó –†–∏—Å–æ–≤–∞—è –∫–∞—à–∞ —Å –µ–∂–µ–≤–∏–∫–æ–π x 1", :callback_data "nothing"}] [{:text "-", :callback_data "basket-/2"} {:text "13 800 —Å—É–º", :callback_data "nothing"} {:text "+", :callback_data "basket+/2"}] [{:text "ü•ó –°–∫—Ä–µ–º–±–ª —Å –∞–≤–æ–∫–∞–¥–æ –∏ –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ x 3", :callback_data "nothing"}] [{:text "-", :callback_data "basket-/3"} {:text "66 000 —Å—É–º", :callback_data "nothing"} {:text "+", :callback_data "basket+/3"}] [{:text "ü•ó –°—ã—Ä–Ω–∏–∫–∏ —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏ –¥–∂–µ–º–æ–º x 2", :callback_data "nothing"}] [{:text "-", :callback_data "basket-/4"} {:text "30 000 —Å—É–º", :callback_data "nothing"} {:text "+", :callback_data "basket+/4"}] [{:text "ü•ó –°–≤–µ–∂–µ—Å–≤–∞—Ä–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ x 1", :callback_data "nothing"}] [{:text "-", :callback_data "basket-/9"} {:text "11 000 —Å—É–º", :callback_data "nothing"} {:text "+", :callback_data "basket+/9"}] [{:text "ü•ó –Ø–±–ª–æ—á–Ω—ã–π —Ñ—Ä–µ—à x 1", :callback_data "nothing"}] [{:text "-", :callback_data "basket-/10"} {:text "9 900 —Å—É–º", :callback_data "nothing"} {:text "+", :callback_data "basket+/10"}] [{:text "–ï—â–µ!", :switch_inline_query_current_chat ""}] [{:text "üí∞ 130 700 —Å—É–º üîã 3 380 –∫–ö–∞–ª.", :callback_data "nothing"}] [{:text "‚úÖ –î–∞–ª–µ–µ", :callback_data "to-order"}]]}}, :chat_instance "4402156230761928760", :data "to-order"}} {})